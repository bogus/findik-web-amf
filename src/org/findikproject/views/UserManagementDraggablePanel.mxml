<?xml version="1.0" encoding="utf-8"?>
<DraggablePanel xmlns="org.findikproject.components.*" xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:validators="org.findikproject.validators.*" layout="absolute"
	creationComplete="myRemote.getData();"
	titleIcon="@Embed('/assets/images/icons/16x16/kuser.png')" 
	backgroundImage="@Embed('/assets/images/icons/Community Help.png')" 
	title="{resourceManager.getString('resources', 'userman.title')}"
	backgroundSize="200px">
<mx:Metadata> 
	[ResourceBundle("resources")]
</mx:Metadata>

<mx:RemoteObject id="myRemote" destination="zend" source="UserService" 
	showBusyCursor="true" fault="faultListener(event)">
     <mx:method name="getData" result="getDataListener(event)"/>
     <mx:method name="updateData" result="updateDataListener(event)"/>
     <mx:method name="insertData" result="insertDataListener(event)"/>
     <mx:method name="deleteData" result="deleteDataListener(event)"/>
</mx:RemoteObject> 

<mx:Script>
<![CDATA[
	import org.findikproject.components.SessionValues;
	import org.findikproject.util.SHA1;
	import mx.managers.PopUpManager;
	import org.findikproject.components.PasswordUpdate;
   import org.findikproject.components.DoubleClickDataGrid;
   import org.findikproject.beans.VOUser;
   import mx.controls.dataGridClasses.DataGridColumn;
   import mx.events.DataGridEvent;
   import mx.events.CloseEvent;
   import mx.controls.Alert;
   import mx.rpc.events.FaultEvent;
   import mx.rpc.events.ResultEvent;
   import mx.collections.ArrayCollection;
   import mx.events.ResourceEvent;
   import mx.events.ValidationResultEvent;
   import mx.core.IUIComponent;
   import mx.events.DragEvent;
   import mx.managers.DragManager;
   
   private var passwordUpdate:PasswordUpdate = null;
   /**
    * listener for the data grid's itemEditEnd event
    */
   private function update(event:DataGridEvent):void {
        //we don't want to update the id of the item
        if (event.dataField == "id") {
             event.preventDefault();
             return;
        }
        //retrieve the new value from the item editor instance
        var dataGrid:DoubleClickDataGrid = event.target as DoubleClickDataGrid;
        var col:DataGridColumn = dataGrid.columns[event.columnIndex];
        var newValue:String = dataGrid.itemEditorInstance[col.editorDataField];
        //retrieve the data model that was edited
        var user:VOUser = event.itemRenderer.data as VOUser;
        // if the value wasn't change, exit
        if (newValue == user[event.dataField])
             return;
        //update the model with the new values     
        user[event.dataField] = newValue;
        //call the remote method passing the data we want to be saved
        myRemote.updateData(user);
   }
   /**
    * Result listener for get data operation
    */
   private function getDataListener(event:ResultEvent):void {     
		userGrid.dataProvider = event.result as Array;
   }
   /**
    * Result listener for save data operation
    */
   private function updateDataListener(event:ResultEvent):void {
   		resultImage.load('assets/images/icons/16x16/ok.png');
        resultLabel.text = resourceManager.getString('resources','update.successful');
   }
   /**
    * Result listener for save data operation
    */
   private function insertDataListener(event:ResultEvent):void {
   		resultImage.load('assets/images/icons/16x16/ok.png');
   		resultLabel.text = resourceManager.getString('resources','insert.successful');
        myRemote.getData(); 
   } 
   /**
    * Result listener for delete data operation
    */
   private function deleteDataListener(event:ResultEvent):void {
   		resultImage.load('assets/images/icons/16x16/ok.png');
   		resultLabel.text = resourceManager.getString('resources','delete.successful');
        myRemote.getData();
   }   
   /**
    * Fault listener for RemoteObject
    */
   private function faultListener(event:FaultEvent):void {
   		resultImage.load('assets/images/icons/16x16/no.png');
   		resultLabel.text = resourceManager.getString('resources','error');
   }
   
   private function addUser():void {
   		var events:Array = new Array(usernameValidator.validate().type, passwordValidator.validate().type);	   		
   		var result:Boolean = true;
   		
   		for(var i:Number=0; i < events.length; i++)
   			 result = (result && (events[i] == ValidationResultEvent.VALID));
   		
   		if(result) {
   			if(password.text == passwordAgain.text) {
   				var user:VOUser = new VOUser();
   				user.id = 0;
   				user.password = password.text;
   				user.username = username.text;
   				myRemote.insertData(user);
   			}
   			else
   				Alert.show(resourceManager.getString('resources','userman.password.nomatch'));
   		} 
   }
   
   private function deleteDragEnter(evt:DragEvent):void {
	    var obj:IUIComponent = IUIComponent(evt.currentTarget);
	    DragManager.acceptDragDrop(obj);
	}
	
	private function deleteDragDrop(event:DragEvent):void {

		if (event.dragSource.hasFormat("items"))
	    {
			var itemsArray:Array = event.dragSource.dataForFormat("items") as Array;
			var user:VOUser = itemsArray[0] as VOUser;
			myRemote.deleteData(user);				 	
		}
		
	}
	
	private function openUpdatePasswordScreen():void {
		if(passwordUpdate == null) {
			passwordUpdate = new PasswordUpdate();
        	passwordUpdate.addEventListener("UpdatePassword", updatePassword);
  		}
		PopUpManager.addPopUp(passwordUpdate, this, true);
        PopUpManager.centerPopUp(passwordUpdate);
        passwordUpdate.password.text = "";
        passwordUpdate.passwordAgain.text = "";
	}
	
	private function updatePassword(event:Event):void {
		var user:VOUser = userGrid.selectedItem as VOUser;
		user.password = SHA1.hex_sha1(passwordUpdate.password.text);
		myRemote.updateData(user);
		userGrid.selectedItem.password = SHA1.hex_sha1(passwordUpdate.password.text);
		PopUpManager.removePopUp(passwordUpdate);
	}
	
	private function selectedItemChanged():void
 	{	
 		if(SessionValues.authUser.username == 'admin')
 			updatePassButton.enabled = true;
 		else {
		   	if(userGrid.selectedItem.username == SessionValues.authUser.username)
		   		updatePassButton.enabled = true;
		   	else
		   		updatePassButton.enabled = false;
   		}
 	}
 	
 	private function checkAdmin():Boolean
 	{
 		if(SessionValues.authUser.username == 'admin')
 			return true;
 		return false;
 	}
]]>
</mx:Script>

	<DoubleClickDataGrid x="0" y="0" width="330" height="336" rowCount="4" id="userGrid" alpha="0.5"
				itemEditEnd="update(event);"  editable="true" dragEnabled="true" dropEnabled="false"
				change="selectedItemChanged();">
			<columns>
				<mx:DataGridColumn dataField="id" editable="false" width="0"/>
				<mx:DataGridColumn dataField="username" headerText="{resourceManager.getString('resources', 'userman.username')}"/>
				<mx:DataGridColumn dataField="password" editable="false" visible="false" headerText="{resourceManager.getString('resources', 'userman.password')}"/>
			</columns>
	</DoubleClickDataGrid>
	<mx:Form y="0" id="newUser" x="330"  width="243" height="214">
		<mx:FormItem width="202">
			<mx:Text text="{resourceManager.getString('resources', 'userman.username')}"/>
			<mx:TextInput id="username" x="109" y="321"/>		
		</mx:FormItem>
		<mx:FormItem width="202">
			<mx:Text text="{resourceManager.getString('resources', 'userman.password')}"/>
			<mx:TextInput displayAsPassword="true" id="password" x="109" y="321"/>		
		</mx:FormItem>
		<mx:FormItem width="202">
			<mx:Text text="{resourceManager.getString('resources', 'userman.password.again')}"/>
			<mx:TextInput displayAsPassword="true" id="passwordAgain" x="109" y="321"/>		
		</mx:FormItem>
		<mx:FormItem>
			<mx:Button label="{resourceManager.getString('resources', 'userman.add')}" 
				click="addUser();" enabled="{checkAdmin()}"	
				x="287" y="321" icon="@Embed('/assets/images/icons/16x16/edit_add.png')">
				</mx:Button>		
		</mx:FormItem>
	</mx:Form>
	<mx:Image id="image"
			        source="@Embed('/assets/images/remove.png')"
			        dragDrop="deleteDragDrop(event);"
			        dragEnter="deleteDragEnter(event);"  x="502.75" y="252" width="60.243904" height="65"/>
	<mx:Image x="338" y="308" width="16" height="16" id="resultImage"/>
	<mx:Label x="354" y="308" id="resultLabel"/>
	<mx:Label x="338" y="289" text="{resourceManager.getString('resources', 'status')}"/>
	<mx:Button x="354" y="222" label="{resourceManager.getString('resources', 'userman.changepass')}"
		click="openUpdatePasswordScreen();" icon="@Embed('/assets/images/icons/16x16/update.png')" 
		enabled="false" id="updatePassButton"/>
<mx:StringValidator source="{username}" property="text" maxLength="32" required="true" id="usernameValidator" />
<mx:StringValidator source="{password}" minLength="6" maxLength="32" property="text"  required="true" id="passwordValidator" />
<mx:StringValidator source="{passwordAgain}" minLength="6" maxLength="32" property="text"  required="true" id="passwordAgainValidator" />
	
</DraggablePanel>
