<?xml version="1.0" encoding="utf-8"?>
<components:DraggablePanel
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:components="org.findikproject.components.*" layout="absolute" height="676">
	<mx:Metadata>
		[ResourceBundle("resources")] 
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import org.findikproject.components.ACLInnerDataGrid;
			import mx.events.AdvancedDataGridEvent;
			import mx.events.DataGridEvent;
			import org.findikproject.beans.VOTimeTable;
			import mx.events.ValidationResultEvent;
			import mx.collections.IHierarchicalCollectionView;
			import mx.collections.ArrayCollection;
			import mx.collections.IViewCursor;
			import org.findikproject.beans.VOACLRule;
			import mx.controls.Alert;
			import mx.collections.IList;
			import mx.controls.AdvancedDataGrid;
			import mx.managers.DragManager;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			
			private function rankCompare(obj1:Object, obj2:Object):int
	        {
	            if ((obj1 as VOACLRule).rank > (obj2 as VOACLRule).rank)
	            	return 1;
	            else
	                return -1;
	        }
			
			private function rankDragEnter(event:DragEvent):void {
			    var obj:IUIComponent = IUIComponent(event.currentTarget);
			    if((event.dragInitiator as RemoteAdvancedDataGrid).id.toString() == "aclRuleGrid")
			    	DragManager.acceptDragDrop(obj);
			}
			
			private function rankDragDrop(event:DragEvent):void {
				
				if (event.dragSource.hasFormat("treeDataGridItems"))
			    {
			    	var itemsArray:Array = event.dragSource.dataForFormat("treeDataGridItems") as Array;
			    	var dropTarget:RemoteAdvancedDataGrid = RemoteAdvancedDataGrid(event.currentTarget);
			    	var dragTarget:RemoteAdvancedDataGrid = RemoteAdvancedDataGrid(event.dragInitiator);
			    	var dropIndex:int = dropTarget.calculateDropIndex(event);
			    	
			    	if(dropIndex >= dragTarget.dataProvider.length)
			    		dropIndex = dragTarget.dataProvider.length - 1;
			    	if(dropIndex != dragTarget.selectedIndex) { 
				    	var obj:VOACLRule = aclRuleGrid.dataCollection.getItemAt(dragTarget.selectedIndex) as VOACLRule;
				    	var collView:IHierarchicalCollectionView = 
				    		IHierarchicalCollectionView(dragTarget.dataProvider);
				    	collView.removeChild(null, obj);
				    	collView.addChildAt(null, obj, dropIndex);
				    	aclRuleGrid.getRemoteObject().updateRank(obj,dropIndex);
				    	dragTarget.dataCollection.getItemAt(dropIndex).rank = dropIndex;
				    }
				    
				    aclRuleGrid.getGridData();
			    }
			    
			}
			
			private function add():void {
				if(ruleNameValidator.validate().type && ValidationResultEvent.VALID) {
					var arrItem:ArrayCollection = new ArrayCollection();
					var newRule:Object = new Object();
					newRule.id = 0;
					newRule.name = ruleName.text;
					newRule.desc = ruleDesc.text;
					newRule.rank = 0;
					newRule.deny = ruleMethod.selectedIndex;
					arrItem.addItem(newRule);
					aclRuleGrid.insert(arrItem.toArray());
					aclRuleGrid.getGridData();
				}
			}
			
			public function updateRuleData(event:AdvancedDataGridEvent):void {                 
		        if(event.dataField == "deny")
		        {
		            event.preventDefault();
		            aclRuleGrid.editedItemRenderer.data.deny=ruleMethodEditor(aclRuleGrid.itemEditorInstance).updateMethodPicker.selectedIndex;
		        	aclRuleGrid.dataProvider.itemUpdated(aclRuleGrid.editedItemRenderer);
		        } else if(event.dataField == "av") {
		            event.preventDefault();
		            aclRuleGrid.editedItemRenderer.data.av=ruleAVEditor(aclRuleGrid.itemEditorInstance).updateAVPicker.selectedIndex;
		        	aclRuleGrid.dataProvider.itemUpdated(aclRuleGrid.editedItemRenderer);
		        } else if(event.dataField == "name" || event.dataField == "desc") {
		        	var dataGrid:RemoteAdvancedDataGrid = event.target as RemoteAdvancedDataGrid;
			        var col:AdvancedDataGridColumn = dataGrid.columns[event.columnIndex];
			        var newValue:String = dataGrid.itemEditorInstance[col.editorDataField];
			        var val:Object = event.itemRenderer.data as Object	
			        if (newValue == val[event.dataField])
			           	return;
			        val[event.dataField] = newValue;
		        }         
		        var updatedRule:Object = new Object();
		        updatedRule.id = aclRuleGrid.editedItemRenderer.data.id;
		        updatedRule.name = aclRuleGrid.editedItemRenderer.data.name;
		        updatedRule.desc = aclRuleGrid.editedItemRenderer.data.desc;
		        updatedRule.rank = aclRuleGrid.editedItemRenderer.data.rank;
		        updatedRule.deny = aclRuleGrid.editedItemRenderer.data.deny;
		        updatedRule.av = aclRuleGrid.editedItemRenderer.data.av;
		        aclRuleGrid.updateData(updatedRule);
		        aclRuleGrid.destroyItemEditor();
		        aclRuleGrid.getGridData();
		    }
					
			private function displayDayNames(item:Object, col:DataGridColumn):String
		    {
		    	var days:int = (item as VOTimeTable).dayOfWeek;
		        var list:ArrayCollection = new ArrayCollection();
		        var finalDayStr:String = "";
		        
		        if((days & 2) == 2)
		        	list.addItem(resourceManager.getString('resources', 'timeman.mon'));
		        if((days & 4) == 4)
		        	list.addItem(resourceManager.getString('resources', 'timeman.tue'));
		        if((days & 8) == 8)
		        	list.addItem(resourceManager.getString('resources', 'timeman.wed'));
		        if((days & 16) == 16)
		        	list.addItem(resourceManager.getString('resources', 'timeman.thu'));
		        if((days & 32) == 32)
		        	list.addItem(resourceManager.getString('resources', 'timeman.fri'));
		        if((days & 64) == 64)
		        	list.addItem(resourceManager.getString('resources', 'timeman.sat'));
		        if((days & 128) == 128)
		        	list.addItem(resourceManager.getString('resources', 'timeman.sun'));
		        
		        for(var i:int = 0; i < list.length; i++) {
		        	finalDayStr += list.getItemAt(i);
		        	if(i + 1 < list.length)
		        		finalDayStr += ",";	
		        }
		        	
				return finalDayStr;
		    }
		    
		    private function deleteDragEnter(event:DragEvent):void {
			    var obj:IUIComponent = IUIComponent(event.currentTarget);
			    if((event.dragInitiator is ACLInnerDataGrid) || 
			    	(event.dragInitiator as RemoteAdvancedDataGrid).id.toString() == "aclRuleGrid")
			    {
			    	DragManager.acceptDragDrop(obj);	
			    }
			}
			
			private function deleteDragDrop(event:DragEvent):void {
				if (event.dragSource.hasFormat("treeDataGridItems"))
			    {		    	
			    	var obj:VOACLRule = aclRuleGrid.dataCollection.getItemAt(aclRuleGrid.selectedIndex) as VOACLRule;
			    	var collView:IHierarchicalCollectionView = IHierarchicalCollectionView(aclRuleGrid.dataProvider);
			    	collView.removeChild(null, obj);
			    	aclRuleGrid.remove(obj);
			    	//aclRuleGrid.getGridData();
			    }
			}
		]]>
	</mx:Script>
	<!-- dragComplete="rankDragComplete(event)" -->
	<components:RemoteAdvancedDataGrid 
				id="aclRuleGrid" variableRowHeight="true"
				dragEnabled="true"	dropEnabled="true" dragMoveEnabled="true" 
				x="0" y="0" editable="true" height="370"
				remoteDestination="zend" remoteSource="ACLRuleService"
				groupingCollection="{gc}"
				dragEnter="rankDragEnter(event);"
				dragDrop="rankDragDrop(event);" 
				creationComplete="aclRuleGrid.init();aclRuleGrid.removeEventListener(DataGridEvent.ITEM_EDIT_END,aclRuleGrid.updateGrid);"
				sortableColumns="false" itemEditEnd="updateRuleData(event);">
		<components:dataProvider>
            <mx:GroupingCollection id="gc" source="{aclRuleGrid.dataCollection}" >
                <mx:grouping>
                    <mx:Grouping>
                    	<mx:GroupingField name="name" compareFunction="rankCompare" />
                    </mx:Grouping>
                </mx:grouping>
            </mx:GroupingCollection>
        </components:dataProvider>
		<components:columns>
	        <mx:AdvancedDataGridColumn dataField="name" editable="false" headerText="{resourceManager.getString('resources', 'acl.rulename')}" width="150"/>
	        <mx:AdvancedDataGridColumn dataField="desc" headerText="{resourceManager.getString('resources', 'acl.ruledesc')}" width="200"/>
	        <mx:AdvancedDataGridColumn headerText="{resourceManager.getString('resources', 'acl.method')}" />
	        <mx:AdvancedDataGridColumn headerText="{resourceManager.getString('resources', 'acl.av')}" />
	        <mx:AdvancedDataGridColumn headerText="{resourceManager.getString('resources', 'acl.content')}" width="130"/>
	        <mx:AdvancedDataGridColumn headerText="{resourceManager.getString('resources', 'acl.mimetype')}" width="130"/>
	        <mx:AdvancedDataGridColumn headerText="{resourceManager.getString('resources', 'acl.ipgroups')}" width="130"/>
	        <mx:AdvancedDataGridColumn headerText="{resourceManager.getString('resources', 'acl.timegroups')}" width="130"/>
	    </components:columns>
	    <components:rendererProviders>
	      <mx:AdvancedDataGridRendererProvider columnIndex="2" dataField="deny">
	      	<mx:renderer>
	      		<mx:Component className="ruleMethodEditor">
					<mx:Canvas>
						<mx:ComboBox id="updateMethodPicker" selectedIndex="{data.deny}">
							<mx:dataProvider>
								<mx:String id="ruleDeny">{resourceManager.getString('resources', 'acl.methoddeny')}</mx:String>
								<mx:String id="ruleAccept">{resourceManager.getString('resources', 'acl.methodaccept')}</mx:String>
							</mx:dataProvider>
						</mx:ComboBox>
					</mx:Canvas>
				</mx:Component>
	      	</mx:renderer>
	      </mx:AdvancedDataGridRendererProvider>
	      <mx:AdvancedDataGridRendererProvider columnIndex="3" dataField="av">
	      	<mx:renderer>
	      		<mx:Component className="ruleAVEditor">
					<mx:Canvas>
						<mx:ComboBox id="updateAVPicker" selectedIndex="{data.av}">
							<mx:dataProvider>
								<mx:String id="ruleAVOn">{resourceManager.getString('resources', 'acl.avon')}</mx:String>
								<mx:String id="ruleAVOff">{resourceManager.getString('resources', 'acl.avoff')}</mx:String>
							</mx:dataProvider>
						</mx:ComboBox>
					</mx:Canvas>
				</mx:Component>
	      	</mx:renderer>
	      </mx:AdvancedDataGridRendererProvider> 
          <mx:AdvancedDataGridRendererProvider columnIndex="4" dataField="id">
          	<mx:renderer>
          		<mx:Component>
          			<components:ACLInnerDataGrid rowCount="4"	dragEnabled="true"	dropEnabled="false" 
						x="0" y="0"	editable="true" dragInitiatorId="catGrid" 
						filterGroupName="content" remoteDestination="zend" 
						remoteSource="ACLFilterParamService" showHeaders="false" 
						creationComplete="this.init();">
						<components:columns>
							<mx:DataGridColumn dataField="id" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="ruleId" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="filterKey" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="param" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="name" editable="true"/>
						</components:columns>	
					</components:ACLInnerDataGrid>
          		</mx:Component>
          	</mx:renderer>
          </mx:AdvancedDataGridRendererProvider>          
          <mx:AdvancedDataGridRendererProvider columnIndex="5" dataField="id">
          	<mx:renderer>
          		<mx:Component>
					<components:ACLInnerDataGrid rowCount="4"	dragEnabled="true"	dropEnabled="false" 
						x="0" y="0"	editable="true" dragInitiatorId="mimeGroupGrid"
						filterGroupName="filetype" remoteDestination="zend" 
						remoteSource="ACLFilterParamService" showHeaders="false" 
						creationComplete="this.init();">
						<components:columns>
							<mx:DataGridColumn dataField="id" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="ruleId" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="filterKey" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="param" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="name" editable="true"/>
						</components:columns>	
					</components:ACLInnerDataGrid>
				</mx:Component>
          	</mx:renderer>
          </mx:AdvancedDataGridRendererProvider>
          <mx:AdvancedDataGridRendererProvider columnIndex="6" dataField="id">
          	<mx:renderer>
          		<mx:Component>
          			<components:ACLInnerDataGrid rowCount="4"	dragEnabled="true"	dropEnabled="false" 
						x="0" y="0"	editable="true" dragInitiatorId="ipGrid"
						filterGroupName="iptable" remoteDestination="zend" 
						remoteSource="ACLFilterParamService" showHeaders="false" 
						creationComplete="this.init();">
						<components:columns>
							<mx:DataGridColumn dataField="id" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="ruleId" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="filterKey" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="param" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="name" editable="true"/>
						</components:columns>	
					</components:ACLInnerDataGrid>
          		</mx:Component>
          	</mx:renderer>
          </mx:AdvancedDataGridRendererProvider>
          <mx:AdvancedDataGridRendererProvider columnIndex="7" dataField="id">
          	<mx:renderer>
          		<mx:Component>
          			<components:ACLInnerDataGrid rowCount="4"	dragEnabled="true"	dropEnabled="false" 
						x="0" y="0"	editable="true" dragInitiatorId="timeGrid"
						filterGroupName="timetable" remoteDestination="zend" 
						remoteSource="ACLFilterParamService" showHeaders="false" 
						creationComplete="this.init();">
						<components:columns>
							<mx:DataGridColumn dataField="id" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="ruleId" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="filterKey" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="param" editable="false" visible="false"/>
							<mx:DataGridColumn dataField="name" editable="true"/>
						</components:columns>	
					</components:ACLInnerDataGrid>
          		</mx:Component>
          	</mx:renderer>
          </mx:AdvancedDataGridRendererProvider>
       </components:rendererProviders>  
	</components:RemoteAdvancedDataGrid>
	<mx:Form x="0" y="376" width="355" height="221.74243" borderStyle="solid" cornerRadius="3" borderThickness="2" 
		backgroundColor="#F3F3F3" paddingTop="3" paddingBottom="3">
		<mx:FormHeading label="{resourceManager.getString('resources', 'acl.add')}"/>
		<mx:FormItem label="{resourceManager.getString('resources', 'acl.rulename')}">
			<mx:TextInput width="159" id="ruleName"/>
		</mx:FormItem>
		<mx:FormItem label="{resourceManager.getString('resources', 'acl.ruledesc')}">
			<mx:TextArea width="189" height="73" id="ruleDesc"/>
		</mx:FormItem>
		<mx:FormItem label="{resourceManager.getString('resources', 'acl.method')}">
			<mx:ComboBox id="ruleMethod">
				<mx:dataProvider>
					<mx:String id="ruleDeny">{resourceManager.getString('resources', 'acl.methoddeny')}</mx:String>
					<mx:String id="ruleAccept">{resourceManager.getString('resources', 'acl.methodaccept')}</mx:String>
				</mx:dataProvider>
			</mx:ComboBox>
		</mx:FormItem>
		<mx:FormItem>
			<mx:Button label="{resourceManager.getString('resources', 'acl.add')}" click="add();"
				icon="@Embed('/assets/images/icons/16x16/edit_add.png')"/>
		</mx:FormItem>
	</mx:Form>
	<mx:StringValidator id="ruleNameValidator" required="true" source="{ruleName}" property="text" maxLength="128" minLength="3"/>
	<mx:PopUpButton x="363" width="150" label="{resourceManager.getString('resources', 'acl.content')}" 
		closeOnActivity="false" y="378" icon="@Embed('/assets/images/icons/16x16/internet.png')">
		<mx:popUp>
		<components:RemoteDoubleClickDataGrid rowCount="5" id="catGrid"
				dragEnabled="true" dropEnabled="false" 
				x="0" y="0"	remoteDestination="zend" remoteSource="ContentCategoryService"
				statusLabel="{resultLabel}" statusImage="{resultImage}"
				creationComplete="catGrid.init();">				
			<components:columns>
				<mx:DataGridColumn dataField="id" editable="false" visible="false"/>
				<mx:DataGridColumn dataField="name" width="100" editable="true" headerText="{resourceManager.getString('resources', 'content.catname')}"/>
				<mx:DataGridColumn dataField="domainCount" editable="true" headerText="{resourceManager.getString('resources', 'content.domainCount')}"/>
				<mx:DataGridColumn dataField="urlCount" editable="true" headerText="{resourceManager.getString('resources', 'content.urlCount')}"/>
				<mx:DataGridColumn dataField="regexCount" editable="true" headerText="{resourceManager.getString('resources', 'content.regexCount')}"/>
			</components:columns>
		</components:RemoteDoubleClickDataGrid>
		</mx:popUp>
	</mx:PopUpButton>
	<mx:PopUpButton x="521" width="150" label="{resourceManager.getString('resources', 'acl.mimetype')}" 
		closeOnActivity="false" y="378" icon="@Embed('/assets/images/icons/16x16/mime.png')">
		<mx:popUp>
		<components:RemoteDoubleClickDataGrid rowCount="5" id="mimeGroupGrid"
				dragEnabled="true" dropEnabled="false" 
				x="0" y="0" remoteDestination="zend" remoteSource="MimeTypeGroupService"
				statusLabel="{resultLabel}" statusImage="{resultImage}"
				creationComplete="mimeGroupGrid.init();">				
			<components:columns>
				<mx:DataGridColumn dataField="id" editable="false" visible="false"/>
				<mx:DataGridColumn dataField="name" editable="true" headerText="{resourceManager.getString('resources', 'mime.groupname')}"/>
				<mx:DataGridColumn dataField="crossCount" width="100" editable="false" headerText="{resourceManager.getString('resources', 'mime.groupcount')}"/>
			</components:columns>
		</components:RemoteDoubleClickDataGrid>
		</mx:popUp>
	</mx:PopUpButton>
	<mx:PopUpButton x="679" width="150" label="{resourceManager.getString('resources', 'acl.ipgroups')}" 
		closeOnActivity="false" y="378" icon="@Embed('/assets/images/icons/16x16/package_network.png')">
		<mx:popUp>
		<components:RemoteDoubleClickDataGrid rowCount="5" id="ipGrid"
				dragEnabled="true" dropEnabled="false" x="0" y="0"
				remoteDestination="zend" remoteSource="IPTableService"
				statusLabel="{resultLabel}" statusImage="{resultImage}"
				creationComplete="ipGrid.init();">				
			<components:columns>
				<mx:DataGridColumn dataField="id" editable="false" width="0"/>
				<mx:DataGridColumn dataField="name"  editable="true" headerText="{resourceManager.getString('resources', 'ipman.name')}"/>
				<mx:DataGridColumn dataField="localIp" editable="false" headerText="{resourceManager.getString('resources', 'ipman.localip')}"/>
				<mx:DataGridColumn dataField="localMask" editable="false" headerText="{resourceManager.getString('resources', 'ipman.localmask')}"/>
			</components:columns>
		</components:RemoteDoubleClickDataGrid>
		</mx:popUp>
	</mx:PopUpButton>
	<mx:PopUpButton x="837" width="150" label="{resourceManager.getString('resources', 'acl.timegroups')}" 
		openAlways="true" closeOnActivity="false" y="378" icon="@Embed('/assets/images/icons/16x16/cal.png')">
		<mx:popUp>
		<components:RemoteDoubleClickDataGrid rowCount="5" id="timeGrid"
				dragEnabled="true"	dropEnabled="false" x="0" y="0"
				remoteDestination="zend" remoteSource="TimeTableService"
				statusLabel="{resultLabel}" statusImage="{resultImage}"
				creationComplete="timeGrid.init();">				
				<components:columns>
					<mx:DataGridColumn dataField="id" editable="false" width="0"/>
					<mx:DataGridColumn dataField="name" width="100" editable="true" headerText="{resourceManager.getString('resources', 'timeman.name')}"/>
					<mx:DataGridColumn dataField="startTime" width="70" editable="false" headerText="{resourceManager.getString('resources', 'timeman.starttime')}"/>
					<mx:DataGridColumn dataField="endTime" width="70" editable="false" headerText="{resourceManager.getString('resources', 'timeman.endtime')}"/>
					<mx:DataGridColumn dataField="dayOfWeek" editable="false" headerText="{resourceManager.getString('resources', 'timeman.dayofweek')}"
						labelFunction="displayDayNames"/>
				</components:columns>
		</components:RemoteDoubleClickDataGrid>
		</mx:popUp>
	</mx:PopUpButton>
	<mx:Image id="image"
			        source="@Embed('/assets/images/remove.png')" 
			        dragDrop="deleteDragDrop(event);" dragEnter="deleteDragEnter(event);"
			        x="968" y="524" width="64" height="64"/>
	<mx:ControlBar horizontalAlign="right" x="0" y="728">
		<mx:Image width="16" height="16" id="resultImage"/>
		<mx:Label id="resultLabel"/>
	</mx:ControlBar>	
</components:DraggablePanel>
